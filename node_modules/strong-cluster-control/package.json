{
  "name": "strong-cluster-control",
  "version": "0.2.2",
  "description": "run-time managment of a node cluster",
  "license": "MIT",
  "main": "index.js",
  "bin": {
    "clusterctl": "bin/cli.js"
  },
  "scripts": {
    "test": "mocha --reporter spec",
    "lint": "./node_modules/.bin/jshint *.js test lib"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/strongloop/strong-cluster-control.git"
  },
  "author": {
    "name": "Sam Roberts",
    "email": "sam@strongloop.com"
  },
  "dependencies": {
    "commander": "~1.3.0",
    "debuglog": "~0.0.1",
    "rc": "~0.3.1",
    "lodash": "~2.2.0"
  },
  "devDependencies": {
    "mocha": "~1.9.0",
    "jshint": "~2.0.1"
  },
  "engines": {
    "node": "*"
  },
  "readme": "# Run-Time Management of a Node Cluster\n\nModule for run-time management of a node cluster.\nIt is an extension of the node cluster module, not a replacement.\n\nFor full documentation, see \n[StrongLoop Suite Documentation - Clustering applications](http://docs.strongloop.com/display/DOC/Clustering+applications).\n\n- runs `size` workers (optionally), and monitors them for unexpected death\n- run-time control of cluster through command line and API\n- soft shutdown as well as hard termination of workers\n- throttles worker restart rate if they are exiting abnormally\n\nIt can be added to an existing application using the node cluster module without\nmodifying how that application is currently starting up or using cluster, and\nstill make use of additional features.\n\nThe controller module allows the cluster to be controlled through the\n\n- clusterctl command line, or\n- API calls on the module\n\n\n## Install\n\n    npm install --save strong-cluster-control\n\nThe command line:\n\n    npm install -g strong-cluster-control\n    clusterctl --help\n\n\n## Example\n\nTo instantiate cluster-control:\n\n```javascript\nvar cluster = require('cluster');\nvar control = require('strong-cluster-control');\n\n// global setup here...\n\ncontrol.start({\n    size: control.CPUS\n}).on('error', function(er) {\n    console.error(er);\n});\n\nif(cluster.isWorker) {\n    // do work here...\n}\n```\n\nTo control the cluster, assuming `my-server` is running in `/apps/`:\n\n    clusterctl --path /apps/my-server/clusterctl set-size 4\n    clusterctl --path /apps/my-server/clusterctl status\n    worker count: 4\n    worker id 0: { pid: 11454 }\n    worker id 1: { pid: 11471 }\n    worker id 2: { pid: 11473 }\n    worker id 3: { pid: 11475 }\n\nFor more in-depth examples, see the [chat server example](https://github.com/strongloop/slnode-examples/tree/master/chat),\nand the\n[in-source example](https://github.com/strongloop/strong-cluster-control/blob/master/bin/example-master.js).\n\n\n## clusterctl: Command Line Interface\n\nThe `clusterctl` command line utility can be used to control a cluster at\nrun-time. It defaults to communicating over the `clusterctl` named socket\nin the current working directory, but an explicit path or port can be\nprovided.\n\nIt provides the following commands:\n\n- status: reports the status of the cluster workers\n- set-size: set cluster size to some number of workers\n- disconnect: disconnect all workers\n- fork: fork one worker\n\n`disconnect` and `fork` cause the cluster size to change, so new workers will\nprobably be started or stopped to return the cluster to the set size. They are\nprimarily for testing and development.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/strongloop/strong-cluster-control/issues"
  },
  "homepage": "https://github.com/strongloop/strong-cluster-control",
  "_id": "strong-cluster-control@0.2.2",
  "_from": "strong-cluster-control@~0.2.2"
}
